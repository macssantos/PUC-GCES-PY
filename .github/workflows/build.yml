# name: Build

name: "build"
on:
  workflow_dispatch:

jobs:
  DemoSonarCloudSCan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
            SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
        with:
          args: >
              -Dsonar.organization=macssantos
              -Dsonar.projectKey=macssantos
              -Dsonar.python.coverage.reportPaths=coverage.xml

# on:
#   push:
#     branches:
#       - main


# jobs:
#   build:
#     name: Build and analyze
#     runs-on: ubuntu-latest
    
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - uses: sonarsource/sonarqube-scan-action@master
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: http://localhost:9000
#           # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


          
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#       name: CI

# on:
#   push:
#     branches:
#       - main  # ou substitua pela branch que vocÃª deseja usar

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: 3.9

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install poetry
#         poetry install

    # - name: Run tests
    #   run: poetry run pytest

    # - name: Lint documentation
    #   run: poetry run sphinx-build -b html docs _build/html

    # - name: Deploy to PyPI
    #   if: github.ref == 'refs/heads/main'  # ou substitua pela branch desejada
    #   run: |
    #     poetry build
    #     poetry publish --username __token__ --password ${{ secrets.GITHUB_TOKEN }}

